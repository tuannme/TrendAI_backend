swagger: "2.0"
info:
  title: TrendAI Backend APIs
  description: APIs document for TrendAI Backend app
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: zenthangplus@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /admin/interest_categories:
    put:
      tags:
      - admin
      description: Push interest categories to database
      operationId: AdminController.PushInterestCategories
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.AuthenticationResponse'
        "400":
          description: '{object} models.ResponseWithError'
  /auth/login:
    post:
      tags:
      - auth
      description: Login API
      operationId: AuthController.Login
      parameters:
      - in: body
        name: access_token
        description: Twitter access token
        required: true
        type: string
      - in: body
        name: access_token_secret
        description: Twitter access token secret
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.AuthenticationResponse'
        "400":
          description: '{object} models.ResponseWithError'
        "401":
          description: '{object} models.ResponseWithError'
  /user/:
    get:
      tags:
      - user
      description: Get current user
      operationId: UserController.Get
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: '{object} models.ResponseWithError'
    patch:
      tags:
      - user
      description: Update specific fields for current user
      operationId: UserController.Patch
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: '{object} models.ResponseWithError'
        "500":
          description: '{object} models.ResponseWithError'
  /user/categories:
    get:
      tags:
      - user
      description: Get all categories available
      operationId: UserController.GetCategories
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Category'
        "500":
          description: '{object} models.ResponseWithError'
definitions:
  models.AuthenticationResponse:
    title: AuthenticationResponse
    type: object
    properties:
      token:
        $ref: '#/definitions/models.AuthenticationToken'
      user:
        $ref: '#/definitions/models.UserResponse'
  models.AuthenticationToken:
    title: AuthenticationToken
    type: object
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
  models.BaseCategory:
    title: BaseCategory
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      slug:
        type: string
  models.Category:
    title: Category
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      sub_categories:
        type: array
        items:
          $ref: '#/definitions/models.SubCategory'
  models.SubCategory:
    title: SubCategory
    type: object
  models.UserResponse:
    title: UserResponse
    type: object
    properties:
      created_at:
        type: string
        format: datetime
      dob:
        type: string
        format: datetime
      education:
        type: string
      email:
        type: string
      gender:
        type: string
      id:
        type: string
      name:
        type: string
tags:
- name: user
  description: |
    Operations about Users
